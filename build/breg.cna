
global('$ArgumentParsingError %RegistryTypes %HiveRootValues %ArchEnum');

$ArgumentParsingError = "NobodyIsLikelyToIncludeThisAsAValueOnAnActualTargetMachineOkayLasagna";

%RegistryTypes = %(
	REG_NONE => 0,
	REG_SZ => 1,
	REG_EXPAND_SZ => 2,
	REG_DWORD => 4,
	REG_QWORD => 11
);

%HiveRootValues = %(
	HKCR => 2147483648,
	HKCU => 2147483649,
	HKLM => 2147483650,
	HKU  => 2147483651,
	HKCC => 2147483653
);

%ArchEnum = %(
	default => 0,
	x64 => 256,
	64 => 256,
	x86 => 512,
	86 => 512,
	x32 => 512,
	32 => 512
);

alias breg{
	
	local('$barch $hBofFile $bofFileData $packedArgs $command $basicValidationCheck $remoteComputerName $remoteComputerNameEndIndex $archString $arch $hiveRoot $hiveRootEndIndex $key $value $emptyVal $dataType $dataTypeNum $data $hexstring');

	# figure out the arch of this session
	$barch  = barch($1);
	
	# read in the right BOF file
	$hBofFile = openf(script_resource("breg. $+ $barch $+ .o"));
	$bofFileData   = readb($hBofFile, -1);
	closef($hBofFile);

	if($2 is $null || $3 is $null){
		berror($1, "Usage: breg <command> <key> [options]");
		return;
	}
	
	$key = $3;
	$remoteComputerName = $null;

	#check if remote registry
	if($key ismatch "^\\\\\\\\(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])\\\\(?i)(hklm|hkcu|hku|hkcr|hkcc)(\\\\.*)?"){
		$remoteComputerNameEndIndex = indexOf($key, "\\", 2);
		$remoteComputerName = substr($key, 0, $remoteComputerNameEndIndex);
		$key = substr($key, $remoteComputerNameEndIndex + 1);
	}
	else if ($key !ismatch "^(?i)(hklm|hkcu|hku|hkcr|hkcc)(\\\\.*)?"){
		berror($1, "breg: \"$key\" is not a valid registry key");
		return;
	}

	$hiveRootEndIndex = indexOf($key, "\\", 0);
	if($hiveRootEndIndex is $null){
		$hiveRoot = $key;
		$key = "";
	}
	else{
		$hiveRoot = substr($key, 0, $hiveRootEndIndex);
		$key = substr($key, $hiveRootEndIndex + 1);
	}

	if(lc($2) eq "query"){
		$command = "query";
	}
	else if(lc($2) eq "add"){
		$command = "add";
	}
	else if(lc($2) eq "delete"){
		$command = "delete";
	}
	else{
		berror($1, "breg: The only commands supported at the moment are 'query', 'add', or 'delete'.");
		return;
	}

	$basicValidationCheck = BasicArgumentValidation($1, $4, $6, $8);

	if($basicValidationCheck == 0){
		return;
	}

	$value = GetValueForArgument($1, "/v", $4, $5, $6, $7, $8, $9, $10, $11);
	$data = GetValueForArgument($1, "/d", $4, $5, $6, $7, $8, $9, $10, $11);
	$dataType = GetValueForArgument($1, "/t", $4, $5, $6, $7, $8, $9, $10, $11);
	$archString = GetValueForArgument($1, "/a", $4, $5, $6, $7, $8, $9, $10, $11);

	if( ($value eq $ArgumentParsingError) || ($data eq $ArgumentParsingError) || ($dataType eq $ArgumentParsingError) || ($archString eq $ArgumentParsingError) ){
		return;
	}

	$emptyVal = 0;
	if($value is $null){
		$emptyVal = 1;
	}

	if($value is $null && ( ($data !is $null) || ($dataType !is $null ))){
		berror($1, "breg: '/v' cannot be null if specifying extra options");
		return;
	}
	if( ( ($command eq "query") || ($command eq "delete") )&& ( ($data !is $null) || ($dataType !is $null) ) ){
		berror($1, "breg: the '" . $command . "' command only supports the '/v' and '/a' arguments");
		return;
	}
	if($dataType is $null){
		$dataType = "REG_SZ";
	}
	$dataType = uc($dataType);
	if( $dataType !in @( "REG_SZ", "REG_NONE", "REG_DWORD", "REG_QWORD", "REG_EXPAND_SZ" )){
		berror($1, "breg: '/t' must be one of the following: REG_SZ, REG_NONE, REG_DWORD, REG_QWORD, or REG_EXPAND_SZ");
		return;
	}
	if( ($dataType eq "REG_NONE") && ($data !is $null) ){
		berror($1, "breg: data must not be provided if type is REG_NONE");
		return;
	}
	if( ($command eq "add") && ($dataType !eq "REG_NONE") && ($data is $null) && ($value !is $null)){
		berror($1, "breg: data must be provided for type $dataType");
		return;
	}
	if( ($dataType eq "REG_DWORD") || ($dataType eq "REG_QWORD") ){
		if($data ismatch '0[xX][0-9a-fA-F]+'){
			$hexstring = $data;
			$data = formatNumber(substr($data, 2), 16, 10);
		}
		else if( -isnumber $data ){
			$hexstring = "0x" . formatNumber($data, 10, 16);
		}
		else{
			berror($1, "breg: a datatype of $dataType was specified but \"$data\" is not a valid number");
			return;
		}
		if( ($dataType eq "REG_DWORD") && ($data > 4294967295) ){
			berror($1, "breg: $data [" . $hexstring . "] is larger than the max limit for type REG_DWORD");
			return;
		}
	}
	if($archString !is $null){
		$archString = lc($archString);
		if( $archString !in %ArchEnum ){
			berror($1, "breg: Architecture can only be 'x64' or 'x32'");
			return;
		}
	}
	else{
		$archString = "default";
	}

	$arch = %ArchEnum[$archString];
	$dataTypeNum = %RegistryTypes[$dataType];

	$packedArgs = bof_pack($1, "zzzizziiz", $command, $remoteComputerName, uc($hiveRoot), $arch, $key, $value, $emptyVal, $dataTypeNum, $data);
	btask($1, "Tasked beacon to run $0");
	beacon_inline_execute($1, $bofFileData, "go", $packedArgs);
}

#$1 = beacon id
#$2 = 4th command line argument
#$3 = 6th command line argument
#$4 = 8th command line argument
#returns 1 if check passes, 0 if doesn't pass
sub BasicArgumentValidation{
	local('@validArguments $bid $arg4 $arg6 $arg8');

	@validArguments = @( $null, "/v", "/t", "/d", "/a" );

	$bid = $1;
	$arg4 = lc($2);
	$arg6 = lc($3);
	$arg8 = lc($4);

	if($arg4 !in @validArguments){
		berror($bid, "breg: Unknown argument '" . $2 . "'");
		return 0;
	}
	if($arg6 !in @validArguments){
		berror($bid, "breg: Unknown argument '" . $3 . "'");
		return 0;
	}
	if($arg8 !in @validArguments){
		berror($bid, "breg: Unknown argument '" . $4 . "'");
		return 0;
	}

	return 1;

}

#$1 = beacon id
#$2 = the argument that's passed in
#$3 = the 4th command line argument
#$4 = the 5th command line argument
#$5 = the 6th command line argument
#$6 = the 7th command line argument
#$7 = the 8th command line argument
#$8 = the 9th command line argument
#$9 = the 10th command line argument
#$10 = the 11th command line argument
#returns the value of that argument, $null if it does not exist, or $ArgumentParsingError if there is an error
sub GetValueForArgument
{
	local('$bid $targetArgument $arg4 $arg5 $arg6 $arg7 $arg8 $arg9 $arg10 $arg11 $targetArgumentCount $value');

	$bid = $1;
	$targetArgument = lc($2);
	$arg4 = lc($3);
	$arg5 = $4;
	$arg6 = lc($5);
	$arg7 = $6;
	$arg8 = lc($7);
	$arg9 = $8;
	$arg10 = lc($9);
	$arg11 = $10;

	$targetArgumentCount = 0;
	$value = $null;

	if($arg4 eq $targetArgument){
		if($arg5 is $null){
			berror($bid, "breg: A value must follow '" . $targetArgument . "'");
			return $ArgumentParsingError;
		}
		$targetArgumentCount = $targetArgumentCount + 1;
		$value = $arg5;
	}
	if($arg6 eq $targetArgument){
		if($arg7 is $null){
			berror($bid, "breg: A value must follow '" . $targetArgument . "'");
			return $ArgumentParsingError;
		}
		$targetArgumentCount = $targetArgumentCount + 1;
		$value = $arg7;
	}
	if($arg8 eq $targetArgument){
		if($arg9 is $null){
			berror($bid, "breg: A value must follow '" . $targetArgument . "'");
			return $ArgumentParsingError;
		}
		$targetArgumentCount = $targetArgumentCount + 1;
		$value = $arg9;
	}
	if($arg10 eq $targetArgument){
		if($arg11 is $null){
			berror($bid, "breg: A value must follow '" . $targetArgument . "'");
			return $ArgumentParsingError;
		}
		$targetArgumentCount = $targetArgumentCount + 1;
		$value = $arg11;
	}
	if($targetArgumentCount > 1){
		berror($bid, "breg: '" . $targetArgument . "' may only be specified once");
			return $ArgumentParsingError;
	}
	if($targetArgumentCount == 0){
		return $null;
	}
	return $value;
}

beacon_command_register(
	"breg",
	"[+] Queries, adds, or deletes keys/values in the windows registry using a beacon object file",
	"Queries, adds, or deletes keys/values in the windows registry using a beacon object file

Usage: breg <command> <key> [/v value] [/t type] [/d data] [/a arch]
   - command: 'query', 'add', or 'delete'. Other registry commands are not supported at this time
   - key: A windows registry key
      - If local must start with HKLM, HKCU, HKCR, HKU, or HKCC
      - If remote must be of the form \\\\computername\\hiveroot[\\subkey], where hiveroot is one of the aforementioned keys
   - value: A value to query, add, or delete if dealing with values. Specify an empty string to target the default value of a key (equivalent to /ve)
   - type: One of the following: REG_SZ, REG_NONE, REG_DWORD, REG_QWORD, REG_EXPAND_SZ. Other types are not supported at this time. Default is REG_SZ
   - data: Data to add if adding a value. This argument is required when adding a value unless the type is REG_NONE
   - arch: The version of the registry to check. Can be 'x64' or 'x32'. Default is the arch of the current beacon
");

#helper functions that you can call from other script_resource


#Adds a string registry key to the local computer
	#$1 = beacon id
	#$2 = key
	#$3 = value name ("" or $null to set the default entry)
	#$4 = string to add
	#$5 = arch ('x64', 'x32', or leave as null for default)
#example alias below this function
sub breg_add_string_value{

	local('$barch $hBofFile $bofFileData $bid $fullkey $key $value $emptyVal $data $archString $hiveRoot $hiveRootEndIndex');

	# figure out the arch of this session
	$barch  = barch($1);
	
	# read in the right BOF file
	$hBofFile = openf(script_resource("breg. $+ $barch $+ .o"));
	$bofFileData   = readb($hBofFile, -1);
	closef($hBofFile);

	$bid = $1;
	$key = $2;
	$value = $3;
	$data = $4;
	$archString = $5;

	$fullkey = $key;

	$hiveRootEndIndex = indexOf($key, "\\", 0);
	if($hiveRootEndIndex is $null){
		$hiveRoot = $key;
		$key = "";
	}
	else{
		$hiveRoot = substr($key, 0, $hiveRootEndIndex);
		$key = substr($key, $hiveRootEndIndex + 1);
	}

	$emptyVal = 0;
	if( ($value is $null) || (strlen($value) == 0) ){
		$emptyVal = 1;
	}

	if( ($archString is $null) || (strlen($archString) == 0) ){
		$archString = "default";
		$arch = %ArchEnum[$archString];
	}
	else if ($archString !in %ArchEnum){
		berror($bid, "breg_add_string_value: Unknown arch \"$arch\"");
		return;
	}
	else{
		$arch = %ArchEnum[$archString];
	}

	$packedArgs = bof_pack($bid, "zzzizziiz", "add", $null, uc($hiveRoot), $arch, $key, $value, $emptyVal, %RegistryTypes["REG_SZ"], $data);
	btask($1, "Tasked beacon to add REG_SZ value \"$value\" => \"$data\" to registry key \"$fullkey\" [arch " . $archString . "]");
	beacon_inline_execute($1, $bofFileData, "go", $packedArgs);
}

#an example alias to use the above function
#alias add_runkey_persistence{
#	breg_add_string_value($1, "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "MyRunKey", "C:\\path\\file.exe");
#}

